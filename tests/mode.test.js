// Generated by Qodo Gen

describe('mode', () => {
	const { mode } = require('..');
	// Returns the mode(s) for a list of positive integers
	test('only one mode', () => {
		expect(mode([1, 2, 2, 3, 3, 3, 4])).toEqual([3]);
		expect(mode([-1, -2, -2, -3, -3, -3, -4])).toEqual([-3]);
		expect(mode([-1, 2, -2, 3, 3, -3, 4])).toEqual([3]);
	});

	test('bimodal dataset', () => {
		expect(mode([1, 2, 2, 3, 3, 4])).toEqual([2, 3]);
		expect(mode([1, -2, -2, -3, -3, 4])).toEqual([-2, -3]);
		expect(mode([1, 2, 2, -3, -3, 4])).toEqual([2, -3]);
	});

    test('multimodal dataset', () => {
		expect(mode([1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5])).toEqual([2, 3, 4]);
		expect(mode([-1, -2, -2, -2, -3, -3, -3, -4, -4, -4, -5])).toEqual([-2, -3, -4]);
		expect(mode([1, -2, -2, -2, 3, 3, 3, -4, -4, -4, 5])).toEqual([3, -2, -4]);

	});

	// Returns an empty array for an empty input list
	test('should return an empty array when the input list is empty', () => {
		expect(mode([])).toEqual([]);
	});

    test('should return an empty array when there is no mode', () => {
		expect(mode([1, 2, 3, 4, 5])).toEqual([]);
	});
});
